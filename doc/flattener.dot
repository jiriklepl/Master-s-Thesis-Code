digraph {
    subgraph data {
        node [shape="parallelogram"]

        IfThen [label="then"]
        IfElse [label="else"]
        switchCase [label=<case<i>1</i>, case<i>2</i>, ...>]
    }

    subgraph components {
        node [shape="component"]

        subgraph {
            node [label="Flattener"]

            Flattener
            Flattener2
        }
    }

    subgraph decisions {
        node [shape="diamond"]

        CaseStmt [label="Patternmatch\nstatement"]
    }

    subgraph actions {
        node [shape="box"]

        GetStatement [label=<Get the first<br/>non-transformed statement<br/>or <i>Nothing</i>>]

        subgraph {
            FlattenerIf [label=<Transform it into: <br/>
if <i>cond</i> { goto ifThen } else <font>{</font> goto ifElse }<br/>
ifThen: <i>then</i>; goto fi<br/>
ifElse: <i>else</i><br/>
fi:>]
            FlattenerSwitch [label=<Transform it into:<br/>
switch <i>scrutinee</i> {<br/>
case <i>n</i>: { goto switchCase<i>n</i> }}<br/>
switchCase<i>1</i>: <i>caseBody 1</i>; goto switchEnd <br/>
switchCase<i>2</i>: <i>caseBody 2</i>; goto switchEnd <br/>
...<br/>
switchEnd:
>]
            FlattenerOtherwise [label="Leave it as is"]
        } -> GetStatement

        FlattenerIf -> { IfThen IfElse } -> Flattener -> FlattenerIf
        FlattenerSwitch -> switchCase -> Flattener2 -> FlattenerSwitch
    }

    FlattenerStart [label="Flattener Start"]
    FlattenerStart -> GetStatement -> CaseStmt
    CaseStmt -> FlattenerIf[label=<If <i>cond</i> <i>then</i> <i>else</i>>]
    CaseStmt -> FlattenerSwitch[label=<Switch <i>scrutinee</i> { case <i>n</i>: <i>caseBody n</i> ... }>]
    CaseStmt -> FlattenerResult [label=<Nothing>]
    CaseStmt -> FlattenerOtherwise [label=<Otherwise>]
    FlattenerResult [label="Flattener End"]
}
