{-# LANGUAGE Safe #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}

module CMM.Inference where

import safe Control.Monad.Writer.Lazy
import safe Control.Lens.Getter
import safe Control.Lens.Setter
import safe Control.Lens.Tuple
import safe Data.Data
import safe Data.Functor
import safe Data.Generics.Aliases
import safe Data.Text (Text)
import safe qualified Data.Text as Text
import safe Data.Map (Map)
import safe qualified Data.Map as Map
import safe Data.Maybe
import safe qualified Data.Set as Set

import safe CMM.Inference.Type
import safe CMM.Inference.State


class Data a =>
      Apply a
  where
  apply :: Subst -> a -> a
  apply subst = go
    where
      go :: Data d => d -> d
      go = gmapT go `extT` typeCase
      typeCase =
        \case
          t@(SimpleType (VarType tVar)) -> fromMaybe t $ tVar `Map.lookup` subst
          t -> gmapT go t

instance Apply Type

instance Apply SimpleType

instance Apply Fact

instance Apply Subst where
  subst' `apply` subst = (apply subst' <$> subst) <> subst'

data UnificationError
  = Occurs TypeVar Type
  | Mismatch Type Type
  | NoSubType Type Type -- supertype; subtype
  | NoConstness Constness Type
  | NoKind Text Type
  | NoRegister Text Type
  | TupleMismatch [Type] [Type]
  | GotErrorType Text
  | IllegalPolytype Type

class Unify a where
  unify ::
       MonadWriter [UnificationError] m
    => a
    -> a
    -> m (Subst, a)

equivalent :: Facts -> Facts -> Bool
equivalent = undefined

freshInst :: MonadInferencer m => Type -> m (Type, Facts)
freshInst = undefined

-- superAnnots; subAnnots
subAnnots :: TypeAnnotations -> TypeAnnotations -> Bool
subAnnots = undefined

--superConst; subConst
subConst :: Constness -> Constness -> Bool
subConst = undefined

instance Unify Type where
  unify NoType NoType = return (mempty, NoType)
  unify t@(ErrorType text) _ = tell [GotErrorType text] $> (mempty, t)
  unify _ t@(ErrorType text) = tell [GotErrorType text] $> (mempty, t)
  unify (SimpleType t) (SimpleType t') = (_2 %~ SimpleType) <$> unify t t'
  unify annotT@(AnnotType annots t) annotT'@(AnnotType annots' t')
    | annots == annots' = (_2 %~ AnnotType annots) <$> unify t t'
    | otherwise = tell [Mismatch annotT annotT'] $> (mempty, annotT)
  unify scheme@(Forall int facts t) scheme'@(Forall int' facts' t')
    | int == int' = do
      (subst, t'') <- unify t t'
      if (apply subst <$> facts) `equivalent` (apply subst <$> facts')
        then return (subst, Forall int facts t'')
        else tell [Mismatch scheme scheme'] $> (mempty, scheme)
  unify t t' = tell [Mismatch t t'] $> (mempty, t)

instance Unify SimpleType where
  unify t@(VarType tVar) t'
    | not $ tVar `Set.member` freeTypeVars t' =
      return (Map.singleton tVar $ SimpleType t', t')
    | otherwise =
      tell [Occurs tVar (SimpleType t')] $> (mempty, t)
  unify t' t@VarType {} = unify t t'
  unify (TupleType ts) (TupleType ts') = go ts ts' id mempty
    where
      go (h:t) (h':t') acc subst = do
        (subst', h'') <- (subst `apply` h) `unify` (subst `apply` h')
        go t t' (acc . (h'' :)) (subst' `apply` subst)
      go [] [] acc subst = return (subst, TupleType $ acc [])
      go _ _ acc subst =
        tell [TupleMismatch ts ts'] $> (subst, TupleType $ acc [])
  unify (FunctionType args ret) (FunctionType args' ret') = do
    (subst, args'') <- unify args args'
    (subst', ret'') <- unify (subst `apply` ret) (subst `apply` ret')
    return (subst' `apply` subst, FunctionType (subst' `apply` args'') ret'')
  unify (AddrType t) (AddrType t') = fmap AddrType <$> unify t t'
  unify t t'
    | t == t' = return (mempty, t)
    | otherwise =
       tell [Mismatch (SimpleType t) (SimpleType t')] $> (mempty, t)

-- TODO: add cases with `ErrorType`
-- supertype; subtype; returns Nothing if cannot be determined
subUnify :: MonadWriter [UnificationError] m => Type -> Type -> m (Maybe (Subst, Type))
subUnify (SimpleType (VarType _)) _ =
  return Nothing
subUnify _ (SimpleType (VarType _)) =
  return Nothing

-- the following cases' arguments should be always generated by substitution:
subUnify t@(AnnotType (Nothing, Unknown, Nothing) _) t'@SimpleType{} =
  Just <$> unify t t'
subUnify t@AnnotType{} t'@SimpleType{} =
  Just <$> unify t t' <* tell [NoSubType t t']
subUnify annotT@(AnnotType annots t) annotT'@(AnnotType annots' t')
  | annots `subAnnots` annots' = go
  | otherwise = go <* tell [NoSubType annotT annotT']
  where go = Just . (_2 %~ AnnotType annots') <$> unify t t'
subUnify t t' = Just <$> unify t t' -- TODO: check correctness

-- returns `Just []` on success; `Nothing` if yet to be determined
constLimit :: Constness -> Type -> Maybe [UnificationError]
constLimit _ (SimpleType (VarType _)) = Nothing
constLimit _ (ErrorType text) = Just [GotErrorType text]
constLimit Unknown _ = Just []
constLimit const t@(AnnotType (_, const', _) _)
  | const `subConst` const' = Just []
  | otherwise = Just [NoConstness const t]
constLimit _ SimpleType{} = Just []
constLimit _ NoType{} = Just []
constLimit _ t@Forall{} = Just [IllegalPolytype t]

hasKind :: Text -> Type -> Maybe [UnificationError]
hasKind _ (SimpleType (VarType _)) = Nothing
hasKind _ (ErrorType text) = Just [GotErrorType text]
hasKind _ NoType = Just []
hasKind kind t@Forall{} = Just [NoKind kind t]
hasKind kind (AnnotType (Just kind', _, _) _)
  | kind == kind' = Just []
hasKind kind t = Just [NoKind kind t]

onRegister :: Text -> Type -> Maybe [UnificationError]
onRegister _ (SimpleType (VarType _)) = Nothing
onRegister _ (ErrorType text) = Just [GotErrorType text]
onRegister _ NoType = Just []
onRegister reg t@Forall{} = Just [NoRegister reg t]
onRegister reg (AnnotType (_, _, Just reg') _)
  | reg == reg' = Just []
onRegister reg t = Just [NoRegister reg t]

infer :: MonadInferencer m => Facts -> m Facts
infer (Union t t':facts) = do
  let ((subst, _), errs) = runWriter $ unify t t' -- TODO: do something about `errs`
  unifyCommon subst facts
infer (InstType scheme@Forall{} t:facts) = do
  (t', facts') <- freshInst scheme
  let ((subst, _), errs) = runWriter $ unify t t' -- TODO: do something about `errs`
  infer $ apply subst <$> (facts' <> facts)
infer (InstType _ _:facts) =
  undefined <$> infer facts -- TODO: this should be illegal
infer (fact@(SubType t t'):facts) = do
  let (ret, errs) = runWriter $ subUnify t t' -- TODO: do something about `errs`
  case ret of
    Nothing -> (fact:) <$> infer facts
    Just (subst, _) -> unifyCommon subst facts
infer (fact@(ConstnessLimit const t):facts) =
  case constLimit const t of
    Nothing -> (fact:) <$> infer facts
    Just errs -> infer facts -- TODO: do something about `errs`
infer (fact@(HasKind kind t):facts) =
  case hasKind kind t of
    Nothing -> (fact:) <$> infer facts
    Just errs -> infer facts -- TODO: do something about `errs`
infer (fact@(OnRegister reg t):facts) =
  case onRegister reg t of
    Nothing -> (fact:) <$> infer facts
    Just errs -> infer facts -- TODO: do something about `errs`
infer (fact@(Constraint classHandle ts):facts) =
  (fact:) <$> infer facts -- TODO: continue from here
infer [] = return []

unifyCommon :: MonadInferencer m => Subst -> Facts -> m Facts
unifyCommon subst facts = do
  currentSubst %= apply subst
  infer $ apply subst <$> facts
